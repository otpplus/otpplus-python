import requests


class OTPPlus:
    """
    OTPPlus Class
    """
    def __init__(self, access_key, provider=None):
        """Initializes the OTPPlus Client Object

        :param str access_key: Registered Access Key (see otp.plus)
        :param str provider: Default OTP Provider. Default: None

        :returns: Object of OTPPlus Class
        :rtype: :obj:`OTPPlus`
        """
        self.access_key = access_key
        self.provider = provider

    @classmethod
    def get_providers():
        """Returns list of providers

        :returns: List of providers available or None
        :rtype: :obj:`List[str]`
        """
        ...

    def send_otp(self, to, provider=None):
        """Generates and sends an OTP

        :param str to: Recipient phone number or email
        :param str provider: Provider name. Default: Auto selected based on 'to'

        :returns: set of otp_id (success) or None and error message (if any) or None
        :rtype: :obj:`(str, str)`
        """

    def verify_otp(self, otp_id, otp):
        """Generates and sends an OTP

        :param str otp_id: otp_id returned during send_otp() call
        :param str otp: OTP provided to verify

        :returns: set of verify status and error message (if any) or None
        :rtype: :obj:`(bool, str)`
        """
        ...

    def register_totp(self, userid):
        """Enrolls a client with TOTP Authenticator App

        :param str userid: Unique user id associated with the client

        :returns: Registration page URL (success) or None
        :rtype: :obj:`str`
        """
        ...

    def verify_totp(self, userid, totp):
        """Verifies TOTP provided by client from Authenticator App

        :param str userid: Unique user id associated with the client
        :param str totp: TOTP generated by the Authenticator App

        :returns: set of verify status and error message (if any) or None
        :rtype: :obj:`(bool, str)`
        """
        ...
